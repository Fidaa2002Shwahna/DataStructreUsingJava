package doubly.linked.list;

public class DoublyLinkedList<T> {

    private int length;
    private Node head;
    private Node tail;

    public DoublyLinkedList() {
        this.length = 0;
        this.head = this.tail = null;
    }

    public class Node {

        T val;
        Node prev;
        Node next;

        public Node(T data) {
            this.val = data;
            this.prev = this.next = null;
        }
    }

    public void insertFirst(T data) {
        Node temp = new Node(data);

        if (head == null) {
            temp.next = temp.prev = null;
            head = tail = temp;
        } else {
            temp.next = head;
            temp.prev = null;
            head.prev = temp;
            head = temp;
        }

        length++;
    }

    public void insertLast(T data) {
        Node temp = new Node(data);

        if (head == null) {
            temp.next = temp.prev = null;
            head = tail = temp;
        } else {
            temp.prev = tail;
            temp.next = null;
            tail.next = temp;
            tail = temp;
        }
        length++;
    }

    public void insertAt(T data, int pos) {
        Node temp = new Node(data);
        Node curr = head;

        if (pos == 0) {
            insertFirst(data);
        } else if (pos == length - 1) {
            insertLast(data);
        } else {
            for (int i = 1; i < pos; i++) {
                curr = curr.next;
            }
            temp.next = curr.next;
            temp.prev = curr;
            curr.next.prev = temp;
            curr.next = temp;
            length++;
        }
    }

    public void removeFirst() {
        if (length == 0) {
            return;
        }
        if (length == 1) {
            head = tail = null;
        } else {
            head = head.next;
            head.prev = null;
        }
        length--;
    }

    public void removeLast() {
        if (length == 0) {
            return;
        }
        if (length == 1) {
            head = tail = null;
        } else {
            tail = tail.prev;
            tail.next = null;
        }
        length--;
    }

    public void removeAt(int pos) {
        if (pos < 0 || pos >= length) {
            throw new RuntimeException("Out of bounds!");
        }
        if (pos == 0) {
            removeFirst();
        } else if (pos == length - 1) {
            removeLast();
        } else {
            Node curr = head;
            for (int i = 0; i < pos; i++) {
                curr = curr.next;
            }
            curr.prev.next = curr.next;
            curr.next.prev = curr.prev;
            length--;
        }
    }

    public void print() {
        Node curr = head;
        while (curr != null) {
            System.out.print(curr.val + " ");
            curr = curr.next;
        }
        System.out.println();

    }

    public void reverse() {
        Node curr = tail;
        while (curr != null) {
            System.out.print(curr.val + " ");
            curr = curr.prev;
        }
        System.out.println();
    }

    public static void main(String[] args) {
        DoublyLinkedList<Integer> list = new DoublyLinkedList<>();

        // Insert elements at the beginning
        list.insertFirst(3);
        list.insertFirst(2);
        list.insertFirst(1);

        // Display the list
        System.out.println("Linked List after inserting at the beginning:");
        list.print();

        // Insert elements at the end
        list.insertLast(4);
        list.insertLast(5);

        // Display the list
        System.out.println("Linked List after inserting at the end:");
        list.print();

        // Insert element at a specific position
        list.insertAt(10, 2);

        // Display the list
        System.out.println("Linked List after inserting at position 2:");
        list.print();

        // Remove elements
        list.removeFirst();
        list.removeLast();
        list.removeAt(1);

        // Display the list after removal
        System.out.println("Linked List after removal:");
        list.print();

        // Reverse and display the list
        System.out.println("Reversed Linked List:");
        list.reverse();
    }

}
