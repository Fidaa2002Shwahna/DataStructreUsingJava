package single.linked.list;

public class SingleLinkedList<T> {

    private Node head;
    private int length;

    public SingleLinkedList() {
        this.length = 0;
        this.head = null;
    }

    public class Node {

        T val;
        Node next;

        public Node(T data) {
            this.val = data;
            this.next = null;
        }
    }

    public void insertFirst(T data) {
        Node temp = new Node(data);
        temp.next = head;
        head = temp;
        length++;
    }

    public void insertLast(T data) {
        Node temp = new Node(data);
        if (head == null) {
            head = temp;
        } else {
            Node curr = head;
            while (curr.next != null) {
                curr = curr.next;
            }
            curr.next = temp;
        }
        length++;
    }

    public void insertAt(T data, int pos) {
        if (pos < 0 || pos > length) {
            throw new IllegalArgumentException("Invalid position");
        }

        if (pos == 0) {
            insertFirst(data);
        } else if (pos == length) {
            insertLast(data);
        } else {
            Node temp = new Node(data);
            Node curr = head;
            for (int i = 0; i < pos - 1; i++) {
                curr = curr.next;
            }
            temp.next = curr.next;
            curr.next = temp;
            length++;
        }
    }

    public void deleteFirst() {
        if (length == 0) {
            return;
        }
        head = head.next;
        length--;
    }

    public void deleteLast() {
        if (length == 0) {
            return;
        }
        if (length == 1) {
            head = null;
        } else {
            Node curr = head;
            while (curr.next.next != null) {
                curr = curr.next;
            }
            curr.next = null;
        }
        length--;
    }

    public void deleteAt(int pos) {
        if (pos < 0 || pos >= length) {
            throw new IllegalArgumentException("Invalid position");
        }

        if (pos == 0) {
            deleteFirst();
        } else if (pos == length - 1) {
            deleteLast();
        } else {
            Node curr = head;
            for (int i = 0; i < pos - 1; i++) {
                curr = curr.next;
            }
            curr.next = curr.next.next;
            length--;
        }
    }

    public void print() {
        Node current = head;
        while (current != null) {
            System.out.print(current.val + " ");
            current = current.next;
        }
        System.out.println();
    }

    public void reverse() {
        Node prev = null;
        Node curr = head;
        Node next;

        while (curr != null) {
            next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }

        head = prev;
    }

    public boolean isEmpty() {
        return length == 0;
    }

    public int search(T data) {
        int pos = 0;
        if (isEmpty()) {
            return -1;
        } else {
            Node current = head;
            while (current != null) {
                if (current.val.equals(data)) {
                    return pos;
                }
                current = current.next;
                pos++;
            }
            return -1;
        }
    }

    public static void main(String[] args) {
        SingleLinkedList<Integer> list = new SingleLinkedList<>();

        // Insert elements at the beginning
        list.insertFirst(3);
        list.insertFirst(2);
        list.insertFirst(1);

        // Display the list
        System.out.println("Linked List after inserting at the beginning:");
        list.print();

        // Insert elements at the end
        list.insertLast(4);
        list.insertLast(5);

        // Display the list
        System.out.println("Linked List after inserting at the end:");
        list.print();

        // Insert element at a specific position
        list.insertAt(10, 2);

        // Display the list
        System.out.println("Linked List after inserting at position 2:");
        list.print();

        // Delete elements
        list.deleteFirst();
        list.deleteLast();
        list.deleteAt(1);

        // Display the final list
        System.out.println("Final Linked List:");
        list.print();

        list.reverse();
        list.print();
        System.out.println(list.search(2));
    }
}
