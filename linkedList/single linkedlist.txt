package singlylinkedlist;

public class SinglyLinkedList<T> {
    
    private Node head;
    private int length;
    
    public class Node {
        
        private T data;
        private Node next;
        
        public Node(T data) {
            this.data = data;
            this.next = null;
        }
    }
    
    public void insertFirst(T val) {
        Node temp = new Node(val);
        temp.next = head;
        head = temp;
        length++;
    }
    
    public boolean isEmpty() {
        return length == 0;
    }
    
    public void insertLast(T val) {
        Node temp = new Node(val);
        if (isEmpty()) {
            head = temp;
        } else {
            Node curr = head;
            while (curr.next != null) {
                curr = curr.next;
            }
            curr.next = temp;
        }
        length++;
    }
    
    public void insertAt(int pos, T val) {
        if (pos < 0 || pos > length) {
            throw new IllegalArgumentException("Invalid position");
        }
        Node temp = new Node(val);
        Node curr = head;
        if (pos == 0) {
            insertFirst(val);
        } else if (pos == length) {
            insertLast(val);
        } else {
            for (int i = 1; i < pos; i++) {
                curr = curr.next;
            }
            temp.next = curr.next;
            curr.next = temp;
            length++;
        }
    }
    
    public void print() {
        Node curr = head;
        while (curr != null) {
            System.out.println(curr.data);
            curr = curr.next;
        }
    }
    
    public int getLength() {
        return length;
    }
    
    public T deleteFirst() {
        if (head == null) {
            return null;
        }
        T temp = head.data;
        head = head.next;
        length--;
        return temp;
    }
    
    public T deleteLast() {
        if (head == null) {
            return null; // List is empty, nothing to delete
        }
        
        if (head.next == null) {
            // List contains only one element
            T temp = head.data;
            head = null;
            length--;
            return temp;
        }
        
        Node curr = head;
        Node prev = null;
        
        while (curr.next != null) {
            prev = curr;
            curr = curr.next;
        }
        
        prev.next = null;
        length--;
        return curr.data;
    }
    
    public T deleteAt(int pos) {
        if (pos < 0 || pos >= length) {
            throw new IllegalArgumentException("Invalid position");
        }
        if (isEmpty()) {
            return null;
        } else if (pos == 0) {
            return deleteFirst();
        } else if (pos == length - 1) {
            return deleteLast();
        } else {
            Node curr = head;
            for (int i = 1; i < pos; i++) {
                curr = curr.next;
            }
            T temp = curr.next.data;
            curr.next = curr.next.next;
            length--;
            return temp;
        }
    }
    
    public void reverse() {
        Node prev = null;
        Node next = null;
        Node curr = head;
        
        while (curr != null) {
            next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        
        head = prev;
    }
    
    public int search(T val) {
        Node curr = head;
        int pos = 0;
        while (curr != null) {
            if (curr.data.equals(val)) {
                return pos;
            }
            curr = curr.next;
            pos++;
        }
        return -1;
    }
    
    public static void main(String[] args) {
        SinglyLinkedList<Integer> list = new SinglyLinkedList<>();
        list.insertFirst(1);
        list.insertFirst(2);
        list.insertLast(3);
        list.insertAt(3, 333);
        System.out.println(list.deleteFirst());
        System.out.println(list.deleteAt(2));
        list.reverse();
        list.print();
        System.out.println(list.getLength());
    }
}
